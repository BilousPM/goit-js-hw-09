{"mappings":"qhBAAC,IAAAA,EAAAC,EAAA,SAED,MAAMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,QAASF,SAASC,cAAc,uBAChCE,OAAQH,SAASC,cAAc,sBAC/BG,SAAUJ,SAASC,cAAc,yBAGnC,IAAII,EAAQ,EACRC,EAAW,EAwBf,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACNF,EAAQ,CAACM,SAAAT,EAAUU,MAAAT,IAEpBG,EAAO,CAACK,SAAAT,EAAUU,MAAAT,GAAO,GAEvBA,EAAM,G,CAhCXX,EAAKC,OAAOoB,iBAAiB,UAE7B,SAA4BC,GAC1BA,EAAEC,iBACF,MAAMC,EAAiBC,OAAOzB,EAAKM,SAASoB,OACtCC,EAAaF,OAAOzB,EAAKK,OAAOqB,OAChCE,EAAmBH,OAAOzB,EAAKI,QAAQsB,OAE7C,IAAK,IAAIG,EAAI,EAAGA,EAAIL,EAAgBK,GAAK,EACvCtB,EAAQqB,EAAmBD,EAAaE,EACxCrB,EAAWqB,EAAI,EAEdpB,EAAcD,EAAUD,GACrBuB,MAAK,EAAGX,SAAAY,EAAUX,MAAAY,MACtBC,EAAAnC,GAASoC,OAAOC,QAAQ,uBAAqBJ,QAAiBC,MAAU,IAEpEI,OAAM,EAAGjB,SAAAkB,EAAUjB,MAAAkB,MACvBL,EAAAnC,GAASoC,OAAOK,QAAQ,sBAAoBF,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":[" import Notiflix from 'notiflix';\n\nconst refs = {\n  formEL: document.querySelector('.form'),\n  delayEl: document.querySelector('input[name=\"delay\"]'),\n  stepEl: document.querySelector('input[name=\"step\"]'),\n  amountEl: document.querySelector('input[name=\"amount\"]')\n};\n\nlet delay = 0;\nlet position = 0;\n\nrefs.formEL.addEventListener('submit', hendlePromisSubmit);\n\nfunction hendlePromisSubmit(e) {\n  e.preventDefault(); \n  const quantityPromis = Number(refs.amountEl.value);\n  const stepPromis = Number(refs.stepEl.value);\n  const firstDelayPromis = Number(refs.delayEl.value);\n\n  for (let i = 0; i < quantityPromis; i += 1){\n    delay = firstDelayPromis + stepPromis * i;\n    position = i + 1\n\n     createPromise(position, delay)\n       .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n       .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n  }\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n    resolve({position, delay})\n  } else {\n   reject({position, delay})\n  }\n  }, delay)\n    })\n};"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","formEL","document","querySelector","delayEl","stepEl","amountEl","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$position","$47d4ff9957288465$var$createPromise","position3","delay3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","position","delay","addEventListener","e","preventDefault","quantityPromis","Number","value","stepPromis","firstDelayPromis","i","then","position1","delay1","$parcel$interopDefault","Notify","success","catch","position2","delay2","failure"],"version":3,"file":"03-promises.ddb8b02e.js.map"}