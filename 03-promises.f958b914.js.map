{"mappings":"iiBAAC,IAAAA,EAAAC,EAAA,SAEKC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,QAASF,SAASC,cAAc,uBAChCE,OAAQH,SAASC,cAAc,sBAC/BG,SAAUJ,SAASC,cAAc,yBAyBnC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACNF,EAAQ,CAACH,WAAUC,UAEpBG,EAAO,CAACJ,WAAUC,S,GAEhBA,E,IAhCLT,EAAKC,OAAOgB,iBAAiB,UAE7B,SAA4BC,GAC1BA,EAAEC,iBAKF,IAJA,IAAMC,EAAiBC,OAAOrB,EAAKM,SAASgB,OACtCC,EAAaF,OAAOrB,EAAKK,OAAOiB,OAChCE,EAAmBH,OAAOrB,EAAKI,QAAQkB,OAEpCG,EAAI,EAAGA,EAAIL,EAAgBK,GAAK,EACvChB,MAAQe,EAAmBD,EAAaE,EACxCjB,SAAWiB,EAAI,EAEdlB,EAAcC,SAAUC,OACrBiB,MAAK,SAAAC,G,IAAGC,EAAQD,EAARnB,SAAUqB,EAAKF,EAALlB,MACtBqB,EAAAhC,GAASiC,OAAOC,QAAQ,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAElEK,OAAM,SAAAP,G,IAAGC,EAAQD,EAARnB,SAAUqB,EAAKF,EAALlB,MACvBqB,EAAAhC,GAASiC,OAAOI,QAAQ,sBAAqCF,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":[" import Notiflix from 'notiflix';\n\nconst refs = {\n  formEL: document.querySelector('.form'),\n  delayEl: document.querySelector('input[name=\"delay\"]'),\n  stepEl: document.querySelector('input[name=\"step\"]'),\n  amountEl: document.querySelector('input[name=\"amount\"]')\n}\n\nrefs.formEL.addEventListener('submit', hendlePromisSubmit);\n\nfunction hendlePromisSubmit(e) {\n  e.preventDefault(); \n  const quantityPromis = Number(refs.amountEl.value);\n  const stepPromis = Number(refs.stepEl.value);\n  const firstDelayPromis = Number(refs.delayEl.value);\n\n  for (let i = 0; i < quantityPromis; i += 1){\n    delay = firstDelayPromis + stepPromis * i;\n    position = i + 1\n\n     createPromise(position, delay)\n       .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n       .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n  }\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n    resolve({position, delay})\n  } else {\n   reject({position, delay})\n  }\n  }, delay)\n    })\n};"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","formEL","document","querySelector","delayEl","stepEl","amountEl","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","quantityPromis","Number","value","stepPromis","firstDelayPromis","i","then","param","_$position","_$delay","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.f958b914.js.map"}